// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Raschudesny/otus_go_homeworks/hw12_13_14_15_calendar/internal/server (interfaces: Application)

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"
	time "time"

	storage "github.com/Raschudesny/otus_go_homeworks/hw12_13_14_15_calendar/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockApplication) CreateEvent(arg0 context.Context, arg1 string, arg2, arg3 time.Time, arg4, arg5 string) (storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockApplicationMockRecorder) CreateEvent(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockApplication)(nil).CreateEvent), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteEvent mocks base method.
func (m *MockApplication) DeleteEvent(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockApplicationMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockApplication)(nil).DeleteEvent), arg0, arg1)
}

// ListDayEvents mocks base method.
func (m *MockApplication) ListDayEvents(arg0 context.Context, arg1 time.Time) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDayEvents", arg0, arg1)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDayEvents indicates an expected call of ListDayEvents.
func (mr *MockApplicationMockRecorder) ListDayEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDayEvents", reflect.TypeOf((*MockApplication)(nil).ListDayEvents), arg0, arg1)
}

// ListMonthEvents mocks base method.
func (m *MockApplication) ListMonthEvents(arg0 context.Context, arg1 time.Time) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonthEvents", arg0, arg1)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonthEvents indicates an expected call of ListMonthEvents.
func (mr *MockApplicationMockRecorder) ListMonthEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonthEvents", reflect.TypeOf((*MockApplication)(nil).ListMonthEvents), arg0, arg1)
}

// ListWeekEvents mocks base method.
func (m *MockApplication) ListWeekEvents(arg0 context.Context, arg1 time.Time) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWeekEvents", arg0, arg1)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWeekEvents indicates an expected call of ListWeekEvents.
func (mr *MockApplicationMockRecorder) ListWeekEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWeekEvents", reflect.TypeOf((*MockApplication)(nil).ListWeekEvents), arg0, arg1)
}

// UpdateEvent mocks base method.
func (m *MockApplication) UpdateEvent(arg0 context.Context, arg1 storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockApplicationMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockApplication)(nil).UpdateEvent), arg0, arg1)
}
